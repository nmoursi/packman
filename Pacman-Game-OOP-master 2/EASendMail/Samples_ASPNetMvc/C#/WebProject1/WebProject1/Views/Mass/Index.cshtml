@model WebProject1.Models.MailTask

@{
    ViewBag.Title = "Send mass emails from ASP.NET MVC with background thread pool";
}

<h2>Send mass emails from ASP.NET MVC with background thread pool</h2>
<div style="margin-top:20px;">
    @Html.ActionLink("All Samples", "Index", "Home") &gt; Send mass emails from ASP.NET MVC with background thread pool
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { name = "thisForm", id = "thisForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.HiddenFor(model => model.TaskId)
        @Html.HiddenFor(model => model.AuthType)

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Sender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Sender,
                    new
                    {
                        htmlAttributes = new
                        {
                            @class = "form-control",
                            style = "width:80%; max-width:80%;",
                            placeholder = "sender@example.com"
                        }
                    })
                @Html.ValidationMessageFor(model => model.Sender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RecipientTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.RecipientTo, 5, 5,
               new
               {
                   @class = "form-control",
                   style = "width:80%; max-width:80%;",
                   placeholder = "recipient@example.com\r\nrecipient1@example.com"
               })
                @Html.ValidationMessageFor(model => model.RecipientTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control", style = "width:80%; max-width:80%;" } })
                @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TextBody, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.TextBody, 5, 20, new { @class = "form-control", style = "width:80%; max-width:80%;" })
                @Html.ValidationMessageFor(model => model.TextBody, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.Server, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Server,
               new
               {
                   htmlAttributes = new
                   {
                       @class = "form-control",
                       placeholder = "Input your server address"
                   }
               })
                @Html.ValidationMessageFor(model => model.Server, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Port, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Port", null, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Port, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10 col-md-offset-2">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(model => model.IsSslConnection)
                        @Html.DisplayNameFor(model => model.IsSslConnection)
                    </label>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Protocol</label>
            <div class="col-md-10">
                @Html.DropDownList("Protocol", null, htmlAttributes: new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10 col-md-offset-2">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(model => model.IsAuthenticationRequired)
                        @Html.DisplayNameFor(model => model.IsAuthenticationRequired)
                    </label>
                </div>
            </div>
        </div>

        <div id="user_password_panel">
            <div class="form-group">
                @Html.LabelFor(model => model.User, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.User, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.User, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", type = "Password" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Send Email" id="ButtonAsyncSend" class="btn btn-default" />
                @Html.ActionLink("Back", "Index", "Home", null, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>

}

@Html.Partial("~/Views/Shared/HtmlModalBox.cshtml")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/sample")
    <script>
        $(function () {
            initMassSample();
        });

        function initMassSample() {

            serverAutoConfig().init();
            var statusModal = initModalBox();

            var _form = $('#thisForm');
            var _asyncSendButton = $('#ButtonAsyncSend');

            $(_asyncSendButton).unbind();
            $(_asyncSendButton).on('click', function (event) {
                event.preventDefault();
                $(_form).validate();
                if (!$(_form).valid()) {
                    scrollToError();
                    return;
                }

                $(_form).attr('action', '@Url.Action("AsyncSend")');

                var req_data = $(_form).serialize();
                var req = $(_form).attr('action');

                statusModal.status('Please wait ...');

                $.post(req, req_data)
                .done(function (taskId) {
                    queryStatus(taskId);
                })
                .fail(function (msg) {
                    statusModal.error(msg.status + ': ' + msg.statusText);
                });
            })

            function queryStatus(id) {
                var interval = 300;
                var req = '@Url.Action("QueryAsyncTask")' + '/' + id;

                var task = function () {
                    $.ajax({
                        type: "GET",
                        url: req,
                        cache: false,
                        dataType: "json"
                    }).done(function (msg) {

                        statusModal.status(msg.Status);
                        updateActiveRecipient(msg.ActiveRecipientStatus);
                        if (!msg.Completed) {
                            setTimeout(task, interval);
                            return;
                        }

                        if (msg.HasError) {
                            statusModal.error(msg.Status);
                        }
                        else {
                            statusModal.success(msg.Status);
                        }

                    }).fail(function (msg) {
                        statusModal.error(msg.status + ': ' + msg.statusText);
                    });
                };

                setTimeout(task, interval);
            }

            function updateActiveRecipient(recipients)
            {
                if (recipients.length == 0)
                {
                    statusModal.bodyStatus('');
                    return;
                }

                var html = '<table class=\"table table-bordered\">';
                for (var i = 0; i < recipients.length; i++)
                {
                    var recipient = recipients[i];
                    html += '<tr>';
                    html += '<td>';
                    html += htmlEncode(recipient.Recipient);
                    html += '</td>';
                    html += '<td>';
                    html += recipient.Status;
                    html += '</td>';
                    html += '</tr>';
                }

                html += '</table>';
                statusModal.bodyStatus(html);
            }
        }

    </script>
}
